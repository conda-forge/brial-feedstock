{% set version = "1.2.12" %}
{% set name = "brial-split" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/BRiAl/BRiAl/releases/download/{{ version }}/brial-{{ version }}.tar.bz2
  sha256: ca009e3722dd3f0a60d15501caed1413146c80abced57423e32ae0116f407494

build:
  number: 0
  skip: true  # [win]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - libtool
    - pkg-config
    - make

test:
  commands:
    - test -f ${PREFIX}/include/polybori.h
    - test -f ${PREFIX}/lib/lib{{ name }}.so        # [linux]
    - test -f ${PREFIX}/lib/lib{{ name }}.dylib     # [osx]
    # Cannot run tests for python library as sageruntime is required.
    - test -f $SP_DIR/brial/PyPolyBoRi.py

outputs:
  - name: libbrial
    script: build_libbrial.sh
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - libtool
        - pkg-config
        - make
        - gnuconfig
      host:
        - libpng
        - boost-cpp
        - m4ri
        - zlib
      run:
        - libpng
        - m4ri
        - zlib

  - name: brial
    build:
      noarch: python
    script: build_brial.sh
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - python
        - pip
        - libbrial {{ version }}
      run:
        - python
        - libbrial {{ version }}

about:
  home: https://github.com/BRiAl/BRiAl
  license: GPL-2.0-or-later
  license_file: LICENSE
  summary: Brial - successor to PolyBoRi
  description: |
    The core of PolyBoRi is a C++ library, which provides high-level data
    types for Boolean polynomials and monomials, exponent vectors, as well
    as for the underlying polynomial rings and subsets of the powerset of
    the Boolean variables. As a unique approach, binary decision diagrams
    are used as internal storage type for polynomial structures. On top of
    this C++-library we provide a Python interface. This allows parsing of
    complex polynomial systems, as well as sophisticated and extendable
    strategies for Gröbner base computation. PolyBoRi features a powerful
    reference implementation for Gröbner basis computation.
  dev_url: https://github.com/BRiAl/BRiAl

extra:
  recipe-maintainers:
    - isuruf
    - saraedum
